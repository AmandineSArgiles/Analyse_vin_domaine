# -*- coding: utf-8 -*-
"""checkpoint 4_Amandine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rpQylTAUzC4Eev8TwOyIu8Rzk54Tm8Jy

(English version below)

# FR - Etude de march√© sur le vin

Le client, le Domaine des Croix, cherche √† **d√©finir le prix** de ses bouteilles de vin **pour le march√© am√©ricain**. Il a r√©cup√©r√© un jeu de donn√©es de 130k bouteilles de vin, avec les c√©pages, les pays et r√©gion de production, les mill√©simes (c'est-√†-dire les ann√©es de production), ainsi que des notes ("points") et descriptifs d'oenologues (les sp√©cialistes du vin), et le prix en dollars de toutes ces bouteilles sur le march√© am√©ricain.

**L'objectif sera de faire une pr√©sentation de l'analyse du march√©, et du prix que tu conseilles de fixer pour les vins du client.** Le client n'est pas data analyst, mais souhaiterait comprendre la d√©marche. Il faudra donc s'attacher √† expliquer comment les prix ont √©t√© fix√©s, sans rentrer dans un trop grand niveau technique, autrement dit : vulgariser.

Tu trouveras ci-dessous des trames pour te guider dans cette analyse. Effectue tout d'abord la trame commune. Puis, tu peux suivre l'une de ces trames (Machine Learning ou Business Intelligence). **Ne cherche pas √† effectuer les deux trames ! Choisir, c'est renoncer. Le client pr√©f√®re un travail qualitatif plut√¥t qu'un travail exhaustif.**
Mais tu peux aussi partir dans d'autres directions pour r√©pondre √† la probl√©matique du client. Si tu as des bonnes id√©es √† proposer au client, elles sont √©videmment les bienvenues. C'est toi le Data Analyst maintenant. 




# Jeux de donn√©es
- Dataset des 130k vins : https://github.com/murpi/wilddata/raw/master/wine.zip
- Dataset des 14 vins du Domaine des Croix : https://github.com/murpi/wilddata/raw/master/domaine_des_croix.csv


# Livrables attendus
Le client souhaite une pr√©sentation de 10 minutes suivi de 10 minutes de questions. 
La pr√©sentation contiendra a minima ces √©l√©ments :
- Rappel du contexte et de la probl√©matique
- Analyse exploratoire des donn√©es
- M√©thodologie, outils et langages utilis√©s
- Pr√©sentation de la partie technique et du code cr√©√© pour cette analyse
- R√©ponse √† la question m√©tier : proposition de prix ou de fourchette de prix au client pour √™tre correctement positionn√© face √† la concurrence sur le march√© am√©ricain

# Common framework: data preparation and exploratory analysis

## FR - Preprocessing
La colonne "title" contient le domaine, le mill√©sime et le c√©page ("variety"). Tu dois isoler le mill√©sime (l'ann√©e) dans une colonne d√©di√©e.


## Analyse du march√©
Le Domaine des Croix souhaiterait une analyse descriptive du march√© du vin. Tu vas donc r√©aliser un ensemble de dataviz, avec l'outil de ton choix (Seaborn, Plotly, Excel, PowerBI, Tableau, etc...). Par exemple : 
- la r√©partition du nombre de vins par pays
- les pays qui ont les meilleures notes
- les moyennes de notes par c√©page
- la r√©partition par d√©cile
- etc...

Le client souhaiterait un zoom sp√©cifique sur le c√©page ("variety") Pinot Noir.


## Descriptions
Quels sont les mots qui ressortent le plus dans les descriptions des vins ? Et sp√©cifiquement pour le pinot noir, est-ce tr√®s diff√©rent ?  Et pour la province Burgundi en France ?

# Framework: Business Intelligence

## FR - Analyse comparative

L'objectif ici sera de comparer chacun des vins du client par rapport √† ses concurrents sur le march√©. Par exemple, comparer les tarifs pratiqu√©s pour les vins fran√ßais, puis de plus en plus pr√©cis√©ment, les vins de Bourgogne puisque notre client est en Bourgogne, puis les Pinot Noir bourguignons de la m√™me ann√©e.
N'h√©site pas √† √™tre original dans la pr√©sentation et les dataviz utilis√©es. Utilise toutes les fonctionnalit√©s de Business Intelligence dans un tableau de bord pour aider au mieux le client √† se comparer (infobulles, filtres, etc...).

## Proposition de valeur

Avec le tableau de bord que tu lui as fourni, le client a une id√©e pr√©cise de ses concurrents. Fais lui une proposition de prix en fonction de sa volont√© de positionnement (par exemple : "si vous souhaitez vous positionner sur le haut de gamme, les 25% les plus chers de vos concurrents sont √† ce tarif, nous vous conseillons donc de vous aligner sur ce prix").

## Qualit√© esth√©tique du tableau de bord

Essaye de garder un oeil critique et visuel sur ton tableau de bord. La forme compte autant que le fond pour le client qui n'est pas data analyst. Pense donc √† "vendre" ton analyse. Par exemple, avec des couleurs s'inspirant du milieu vinicole, des dataviz originales, etc...

# It's up to you now:

# üíæ  Import
"""

import pandas as pd
import re
import seaborn as sns
import matplotlib.pyplot as plt
import spacy
from wordcloud import WordCloud
import plotly.express as px

import nltk
from nltk.tokenize import sent_tokenize, word_tokenize
from nltk.corpus import stopwords
from nltk.stem import SnowballStemmer
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('omw-1.4')

link = "https://github.com/murpi/wilddata/raw/master/wine.zip"
df = pd.read_csv(link)

df.head()

link_deux = "https://raw.githubusercontent.com/murpi/wilddata/master/domaine_des_croix.csv"
df_domaine = pd.read_csv(link_deux)

df_domaine.head()

"""# üîç  I - Exploration

* df_domaine = df du domaine de la croix
* df = df des vins

## A -  Exploration / √©tats des lieux des deux df
"""

df_domaine.shape

df_domaine.info()

df_domaine.describe()

df.shape

df.info()

df.describe()

"""## B - Exploration par colonnes

### Dataframe g√©n√©ral sur le vin : df

#### a - Les pays - Colonne "country"
"""

df['country'].value_counts()

df['country'].describe()

# On recherche les valeurs manquantes

country_nan = df['country'].isna().sum()
country_nan

# On remplace les valeurs manquantes par "inconnu"

df['country'].fillna('inconnu', inplace=True)

# On v√©rifie : il n'y a plus de valeurs manquantes

df['country'].isna().sum()

# On regarde combien de pays diff√©rent il y a.
# On voit que "inconnu" s'est bien rajout√© √©galement
df['country'].unique()

# Il y a bien 44 pays diff√©rents sur le df
df['country'].nunique()

"""#### b - Designation"""

# On v√©rifie les valeurs manquantes
df['designation'].isna().sum()

# On remplace les valeurs manquantes
df['designation'].fillna('inconnu', inplace=True)

# On v√©rifie : il n'y a plus de valeurs manquantes
df['designation'].isna().sum()

df['designation'].value_counts()

"""#### c - Description des vins"""

# On v√©rifie les valeurs manquantes
df['description'].isna().sum()

"""#### d - Points - Colonne points"""

# On v√©rifie la r√©partition des points 
df['points'].value_counts()

# On regarde les stats sur la colonne points
df['points'].describe()

"""* Le max des points est de 100
* Un vin tourne en moyenne √† 88 points
"""

# On v√©rifie les valeurs manquantes
# Il n'y en a pas 
df['points'].isna().sum()

"""#### e - Prix - Colonne price"""

df['price'].describe()

"""* Id√©e : le vin le plus cher est √† 1902 dollars et le moins cher √† 2 dollars.
* On tourne autour de 36 dollars la bouteille de vin 
"""

pd.DataFrame(df['price'].value_counts())

"""* Les prix qui ressortent le plus sont 24 et 21 dollars la bouteille"""

# V√©rification des valeurs manquantes
# On a 8993 valeurs manquantes pour le prix
df['price'].isna().sum()

# On regarde le pourcentage de valeurs manquantes par rapport au df
pourcent_manquantes = round(df['price'].isnull().sum()*100/len(df['price']))
print("Il y a ", pourcent_manquantes, "% de valeurs manquantes.\
Cela √©tant peu, elles ne seront pas remplac√©es")

"""#### f - Province"""

df['province'].value_counts()

df['province'].isna().sum()

df['province'].fillna('inconnu', inplace = True)

df['province'].unique()

df['province'].nunique()

"""#### g - Vari√©t√©"""

df['variety'].value_counts()

# On v√©rifie combien de vari√©t√© diff√©rentes il y a
df['variety'].nunique()

""" Il y a 707 vari√©t√©s de vin"""

df['variety'].unique()

# On v√©rifie les valeurs manquantes
df['variety'].isna().sum()

# On remplace la valeur manquante par "inconnu"
df['variety'].fillna('inconnu', inplace=True)

# On v√©rifie, il n'y a plus de valeurs manquantes
df['variety'].isna().sum()

"""#### h - Domaine"""

df['winery'].value_counts()

# On v√©rifie combien de domaine diff√©rents il y a
df['winery'].nunique()

"""Il y a 16756 domaines diff√©rents"""

# On v√©rifie si il y a des valeurs manquantes
# Pas de valeurs manquantes
df['winery'].isna().sum()

"""#### i - R√©gion 1"""

df['region_1'].value_counts()

# On v√©rifie les valeurs manquantes
df['region_1'].isna().sum()

# On regarde le pourcentage de valeurs manquantes par rapport au df
prcent_manquante = round(df['region_1'].isnull().sum()*100/len(df['region_1']))
print("Il y a ", prcent_manquante, "% de valeurs manquantes")

"""* Il y a trop de valeurs manquantes dans cette colonne, on ne la garde pas.

#### j - R√©gion 2
"""

df['region_2'].value_counts()

# On v√©rifie les valeurs manquantes
df['region_2'].isna().sum()

# On regarde le pourcentage de valeurs manquantes par rapport au df
prct_manquante = round(df['region_2'].isnull().sum()*100/len(df['region_2']))
print("Il y a ", prct_manquante, "% de valeurs manquantes")

"""* Il y a trop de valeurs manquantes dans cette colonne, on ne la garde pas.

#### k - Taster name
"""

df['taster_name'].value_counts()

# On regarde les valeurs manquantes
df['taster_name'].isna().sum()

# On regarde le pourcentage de valeurs manquantes
pourcent_manquantes = round(df['taster_name'].isnull().sum()*100/len(df['taster_name']))
print("Il y a ", pourcent_manquantes, "% de valeurs manquantes")

"""* Il y a beaucoup de valeurs manquantes, mais la colonne n'√©tant pas du num√©rique on va remplacer les valeurs manquantes par "inconnu"



"""

# On remplace les valeurs manquantes
df['taster_name'].fillna('inconnu', inplace=True)

# On v√©rifie si inconnu s'est bien substitu√©
df['taster_name'].unique()

"""#### l - twitter"""

df['taster_twitter_handle'].value_counts()

df['taster_twitter_handle'].isna().sum()

# On regarde le pourcentage de valeurs manquantes
pourcent_manquantes = round(df['taster_twitter_handle'].isnull().sum()\
                            * 100 / len(df['taster_twitter_handle']))
print("Il y a ", pourcent_manquantes, "% de valeurs manquantes")

"""* Il y a beaucoup de valeurs manquantes, mais la colonne n'√©tant pas du num√©rique on va remplacer les valeurs manquantes par "inconnu"
"""

# On remplace les valeurs manquantes
df['taster_twitter_handle'].fillna('inconnu', inplace=True)

# On v√©rifie si inconnu s'est bien substitu√©
df['taster_twitter_handle'].unique()

"""### Dataframe du domaine : df_domaine

#### a - Les pays
"""

# On v√©rifie m√™me si logiquement il n'y a qu'un seul pays : la France
df_domaine['country'].value_counts()

# On v√©rifie les valeurs manquantes
df_domaine['country'].isna().sum()

"""* Pas de valeurs manquantes

#### b - Designation
"""

df_domaine['designation'].value_counts()

# On regarde les diff√©rentes designation
df_domaine['designation'].unique()

# On regarde le nombres de designation
df_domaine['designation'].nunique()

# On v√©rifie les valeurs manquantes
df_domaine['designation'].isna().sum()

# on remplace les 5 valeurs manquantes par "inconnu"
df_domaine['designation'].fillna('inconnu', inplace=True)

# On v√©rifie que les valeurs manquantes n'y sont plus
df_domaine['designation'].isna().sum()

# On voit que inconnu s'est bien substitu√©
df_domaine['designation'].unique()

"""#### c - Description des vins"""

# On v√©rifie les valeurs manquantes
df_domaine['description'].isna().sum()

"""#### d - Points"""

# On v√©rifie la r√©partition des points 
df_domaine['points'].value_counts()

# On regarde les stats sur la colonne points
df_domaine['points'].describe()

"""* Les points les plus haut ici sont de 95.
* Un vin tourne en moyenne √† 93 points.
"""

# On regarde les valeurs manquantes
df_domaine['points'].isna().sum()

"""* Il n'y a pas de valeurs manquantes pour les points

#### e - Prix
"""

df_domaine['price'].describe()

# On v√©rifie les valeurs manquantes
df_domaine['price'].isna().sum()

"""* Il n'y a pas de prix c'est normal.

#### f - Province
"""

# On regarde si il y a diff√©rentes provinces quand m√™me
df_domaine['province'].value_counts()

df_domaine['province'].unique()

"""* On a qu'une seule province, c'est normal"""

# On v√©rifie les valeurs manquantes
df_domaine['province'].isna().sum()

"""* il n'y a pas de valeurs manquantes

#### g - Vari√©t√©
"""

df_domaine['variety'].value_counts()

# On v√©rifie combien de vari√©t√© diff√©rentes il y a
df_domaine['variety'].nunique()

"""* Il n'y a que 2 vari√©t√©s"""

# On v√©rifie les valeurs manquantes
df_domaine['variety'].isna().sum()

"""* il n'y a pas de valeurs manquantes

#### h - Domaine
"""

# On v√©rifie qu'il n'y a bien qu'un seul domaine
df_domaine['winery'].value_counts()

# On v√©rifie les valeurs manquantes
df_domaine['winery'].isna().sum()

"""* Pas de valeurs manquantes

#### i - R√©gion 1
"""

df_domaine['region_1'].value_counts()

# On v√©rifie les diff√©rentes r√©gions
df_domaine['region_1'].unique()

df_domaine['region_1'].nunique()

# On v√©rifie les valeurs manquantes
df_domaine['region_1'].isna().sum()

"""* Pas de valeurs manquantes

#### j - R√©gion 2
"""

df_domaine['region_2'].value_counts()

# On v√©rifie les valeurs manquantes
df_domaine['region_2'].isna().sum()

# On regarde le pourcentage de valeurs manquantes par rapport au df
pourcent_manquantes = round(df_domaine['region_2'].isnull().sum()\
                            * 100 / len(df_domaine['region_2']))
print("Il y a ", pourcent_manquantes, "% de valeurs manquantes")

"""* Trop de valeurs manquantes, on ne les remplace pas et on ne gardera pas la colonne

#### k - Taster name
"""

df_domaine['taster_name'].value_counts()

# On v√©rifie qu'il n'y a bien qu'un taster name
df_domaine['taster_name'].unique()

df_domaine['taster_name'].nunique()

# On regarde les valeurs manquantes
df_domaine['taster_name'].isna().sum()

"""* Pas de valeurs manquantes

#### l - Twitter
"""

df_domaine['taster_twitter_handle'].value_counts()

# On v√©rifie qu'il n'y a bien qu'un taster name
df_domaine['taster_twitter_handle'].unique()

df_domaine['taster_twitter_handle'].nunique()

df_domaine['taster_twitter_handle'].isna().sum()

"""* Pas de valeurs manquantes

# üóì II - Cr√©ation d'une colonne pour les dates

* Analyse : les deux df ne comportent pas de colonne concernant l'ann√©e du vin. D'un point de vue m√©tier l'ann√©e d'un vin est importante. Elle peut jouer sur sa notation mais aussi et surtout sur le prix de celui-ci.
"""

# On test extract pour garder que la date
test = pd.Series('Domaine des Croix 2016 Corton Gr√®ves')
test.str.extract(r'(\d{4})')

# C'est ok donc on l'applique √† tout le df_domaine et on cr√©e une colonne
df_domaine['millesime'] = df_domaine['title'].str.extract(r'(\d{4})')

df_domaine.head(1)

df['millesime'] = df['title'].str.extract(r'(\d{4})')

df.head(1)

"""# üßÆ III - Cr√©ation de df suppl√©mentaires

* Pour faire des analyses pr√©cises et des visualisations plus simples √† r√©aliser on cr√©e des df sur des points pr√©cis de l'analyse √† fournir au client.
* N√©cessaire pour la description des mots NLP

## A - Cr√©ation d'un df de vin fran√ßais
"""

# on garde que le pays france dans la colonne country
df_vin_france = df[df['country'] == 'France']
df_vin_france

# On v√©rifie qu'on a bien que des vins fran√ßais
df_vin_france['country'].value_counts()

df_vin_france['country'].unique()

"""## B - Cr√©ation d'un df de vin de Bourgogne

* On en va garder que les vins de bourgogne sur "df" le dataframe global des vins. Le df_domaine ne contient d√©j√† que des vins de bourgogne
"""

df_vin_bourgogne = df[df['province'] == 'Burgundy']
df_vin_bourgogne

# On v√©rifie qu'on a bien que des vins de bourgogne
df_vin_bourgogne['province'].value_counts()

df_vin_bourgogne['province'].unique()

"""## C - Cr√©ation d'un df de Pinot noir

## 1 - Cr√©ation d'un df de Pinot noir sur le df global

### a - On v√©rifie les pinot noirs diff√©rents et on cr√©e un df de pinot noir
"""

df['variety'].unique().tolist()

# Pour contenir tout les pinot noir y compris les pinot noir syrah etc 
df_pinotnoir = df[df['variety'].str.contains('Pinot Noir')]
df_pinotnoir

"""### b - V√©rif sur ce nouveau df pinotnoir"""

df_pinotnoir.shape

df_pinotnoir.info()

df_pinotnoir.describe()

"""## 2 -  Cr√©ation d'un df de pinot noir sur le df_domaine

### a - Cr√©ation par rapport √† la vari√©t√© Pinot noir
"""

df_domaine['variety'].unique().tolist()

df_pinotnoir_domaine = df_domaine[df_domaine['variety'] == 'Pinot Noir']
df_pinotnoir_domaine

"""### b - Verif sur ce nouveau df_pinotnoir_domaine"""

df_pinotnoir_domaine.shape

df_pinotnoir_domaine.info()

df_pinotnoir_domaine.describe()

"""# üßê IV - Analyse

* On renomme le dataframe df par df_vins pour plus de claret√©
"""

df_vins = df

"""### Correlation des prix

* On regarde la correlation entre le prix et les points avec une heatmap puis avec un pairplot
"""

vins_corr = df_vins.corr()
sns.heatmap(vins_corr,
            center=0,
            cmap="vlag",
            annot=True
            )

plt.title("Correlation prix/points vins")
plt.show()

"""* On observe une correlation de 0.47, la correlation est positive mais elle n'est pas tr√®s elev√©e. """

domaine_corr = df_domaine.corr()
sns.heatmap(domaine_corr,
            center=0,
            cmap="vlag",
            annot=True
            )

plt.title("Correlation prix/points domaine")
plt.show()

"""* Ici c'est normal car les prix ne sont pas fix√©s"""

sns.pairplot(df_vins)

fig = px.scatter_matrix(df_vins,
    dimensions=["points", "price"])

fig.show()

sns.pairplot(df_vins,
             hue='country')
plt.show()

"""* Ici on regarde en plus si le pays de provenance pour cette correlation entre les prix et les points attribu√©s. 
* On observe que les vins provenant de France, du portugal, d'espagne, des √©tats-unis et d'italie sont majoritairement pr√©sent.
"""

sns.pairplot(df_vins,
             hue='variety'
             )
plt.show()

plt.boxplot(df_vins["points"])
plt.show()

df_domaine[["points"]].boxplot()

"""### Foire √† la Dataviz (id√©es de graphs)

#### Analyse des points
"""

ax, fig = plt.subplots(figsize=(16, 8))
sns.boxplot(x='country',
            y='points',
            data=df_vins,
            color='purple')
plt.title("Boxplot pays / notes")
plt.xlabel("Pays", size=11)
plt.ylabel("Points", size=11) 

plt.show()

sns.boxplot(x=df_vins['points'],
            color = 'purple')
plt.title("Boxplot des notes")
plt.show()

sns.boxplot(x=df_domaine['points'],
            color='purple')
plt.title("Boxplot des notes/domaine")
plt.show()

sns.boxplot(x=df_vin_bourgogne['points'],
            color='purple')
plt.title("Boxplot des notes/bourgogne")
plt.show()

sns.countplot(x = 'points',
              data=df_vin_bourgogne,
              color='lightblue')
plt.title("R√©partition des points sur les vins de Bourgogne")
plt.xlabel("Points", size=11)  
    
plt.show()

sns.countplot(x = 'points',
              data=df_domaine,
              color='royalblue')
plt.title("R√©partition des points sur les vins du domaine")
plt.xlabel("Points", size = 11)
    
plt.show()

sns.countplot(x = 'points',
              data=df_vin_france,
              color='blue'
              )
plt.title("R√©partition des points sur les vins de France")
plt.xlabel("Points", size=11)

    
plt.show()

sns.countplot(x = 'points',
              data=df_vins,
              color='purple'
              )
plt.title("R√©partition des points sur les vins")
plt.xlabel("Points", size=11)

    
plt.show()

plt.figure(figsize=(20,10))
sns.countplot(x = 'country',
              data=df_vins,
              order=df_vins['country'].value_counts().index,
              color='lightblue')
plt.title("R√©partition nombres de vin par pays")
plt.xlabel("Points", size=11)  

    
plt.show()

"""#### Analyse des prix"""

#plt.figure(figsize=(12,7))
sns.boxplot(x=df_vins['price'],
            color='purple')
plt.title("Boxplot des prix")
plt.show()

#plt.figure(figsize=(12,7))
sns.boxplot(x=df_vin_bourgogne['price'],
            color='purple')
plt.title("Boxplot des prix/bourgogne")
plt.show()

ax, fig = plt.subplots(figsize = (16, 8))
sns.countplot(x = 'price',
              data=df_vins,
              color='lightblue')
plt.title("R√©partition des prix sur les vins de Bourgogne") 
plt.xticks(rotation = 90)
    
plt.show()

"""#### Analyse pour le pinot noir"""

#plt.figure(figsize=(12,7))
sns.boxplot(x=df_pinotnoir['points'],
            color='purple')
plt.title("Boxplot des notes/pinot")
plt.show()

#plt.figure(figsize=(12,7))
sns.boxplot(x=df_pinotnoir['price'],
            color='purple')
plt.title("Boxplot des prix/pinot")
plt.show()

sns.countplot(x = 'points',
              data=df_pinotnoir,
              color='royalblue')
plt.title("R√©partition des points sur les vins Pinot Noir")
plt.xlabel("Points", size=11)  
    
plt.show()

fig = plt.subplots(figsize = (16, 8))
sns.countplot(x = 'province',
              data = df_pinotnoir,
              color = 'blue')
plt.title("R√©partition des points sur les vins Pinot Noir")
plt.xlabel("Points", size = 11)  

    
plt.show()

"""#### Analyse sur les diff√©rentes colonnes

##### Ann√©e - Millesime
"""

df_vins['millesime'].value_counts()

fig = plt.subplots(figsize = (17, 8))
sns.countplot(x = 'millesime',
              data=df_vins,
              color='purple',
              order = df_vins['millesime'].value_counts().index
              )

plt.title("R√©partition des vins selon le millesime")
plt.xlabel("annee", size = 11)


plt.show()

df_vin_france['millesime'].value_counts()

sns.countplot(x = 'millesime',
              data=df_vin_france,
              color='purple',
              order=df_vin_france['millesime'].value_counts().index)

plt.title("R√©partition des vins de France selon le millesime")
plt.xlabel("annee", size=11)


plt.show()

df_vin_bourgogne['millesime'].value_counts()

sns.countplot(x = 'millesime', data=df_vin_bourgogne,
              color='purple',
              order=df_vin_bourgogne['millesime'].value_counts().index)

plt.title("R√©partition des vins de Bourgogne selon le millesime")
plt.xlabel("annee", size=11)


plt.show()

df_pinotnoir['millesime'].value_counts()

sns.countplot(x = 'millesime', data=df_pinotnoir,
              color='purple',
              order=df_pinotnoir['millesime'].value_counts().index)

plt.title("R√©partition des vins pinot noir selon le millesime")
plt.xlabel("annee", size=11)


plt.show()

df_pinotnoir_domaine['millesime'].value_counts()

sns.countplot(x = 'millesime',
              data=df_pinotnoir_domaine,
              color='blue',
              order=df_pinotnoir_domaine['millesime'].value_counts().index
              )

plt.title("R√©partition vins du domaine par millesime")
plt.xlabel("annee", size = 11)


plt.show()

"""* **Reprise et poursuite de l'analyse sur Tableau**

# üí¨ V - Description mots

## Pr√©paration g√©n√©rale
"""

# Ajout des stopwords 
stopwordsenglish = list(nltk.corpus.stopwords.words("english"))

liste_mots_vin = ["wine", "drink"]

stopwordsenglish.extend(liste_mots_vin)

# Cr√©ation d'une fonction de clean de la colonne

def func_clean2(phrase):

    sentence_upt = ""
    tokens_clean = []

    sent_tokens = nltk.word_tokenize(phrase.lower())
    for words in sent_tokens:
        if words not in stopwordsenglish and not words.isnumeric():
            tokens_clean.append(words)
    f_sentence = ' '.join(tokens_clean)
    f_sentence = re.sub(r'[^\w\s]', '', f_sentence)

    return f_sentence

"""## Application au df_bourgogne"""

# Application de la fonction √† la colonne description

df_vin_bourgogne['col_clean'] = df_vin_bourgogne['description'].apply(func_clean2)

df_vin_bourgogne['col_clean'].map(word_tokenize)

# pr√©paration du texte propre

colonne_propre = " ".join([str(word) for word in df_vin_bourgogne['col_clean']])
colonne_propre

"""### ‚òÅÔ∏è Wordcloud Bourgogne """

wordcloud = WordCloud(width=480,
                      height=480,
                      max_font_size=200,
                      min_font_size=10,
                      background_color="white"
                      )

token_mots_deux = nltk.word_tokenize(colonne_propre)
mot_fdist_deux = nltk.FreqDist(token_mots_deux)
wordcloud.generate_from_frequencies(mot_fdist_deux)

plt.figure(figsize=(20, 10))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
plt.margins(x=0, y=0)
plt.show()

"""## Application au df de vin fran√ßais"""

# Application de la fonction √† la colonne description

df_vin_france['col_clean'] = df_vin_france['description'].apply(func_clean2)

# pr√©paration du texte propre

colonne_propre_vinfr = " ".join([str(word) for word in df_vin_france['col_clean']])
colonne_propre_vinfr

"""### ‚òÅÔ∏è Wordcloud vin fran√ßais"""

wordcloud_vinfr = WordCloud(width=480,
                      height=480,
                      max_font_size=200,
                      min_font_size=10,
                      background_color="white"
                      )

token_mots_vinfr = nltk.word_tokenize(colonne_propre_vinfr)
mot_fdist_vinfr = nltk.FreqDist(token_mots_vinfr)
wordcloud_vinfr.generate_from_frequencies(mot_fdist_vinfr)

plt.figure(figsize=(20, 10))
plt.imshow(wordcloud_vinfr, interpolation="bilinear")
plt.axis("off")
plt.margins(x=0, y=0)
plt.show()

"""## Application au df pinotnoir"""

# Application de la fonction √† la colonne description

df_pinotnoir['col_clean'] = df_pinotnoir['description'].apply(func_clean2)

# pr√©paration du texte propre

colonne_propre_pinot = " ".join([str(word) for word in df_pinotnoir['col_clean']])
colonne_propre_pinot

"""### ‚òÅÔ∏è Wordcloud pinot noir"""

wordcloud_pinot = WordCloud(width=480,
                      height=480,
                      max_font_size=200,
                      min_font_size=10,
                      background_color="white"
                      )

token_mots_pinot = nltk.word_tokenize(colonne_propre_pinot)
mot_fdist_pinot = nltk.FreqDist(token_mots_pinot)
wordcloud_pinot.generate_from_frequencies(mot_fdist_pinot)

plt.figure(figsize=(20, 10))
plt.imshow(wordcloud_pinot, interpolation="bilinear")
plt.axis("off")
plt.margins(x=0, y=0)
plt.show()

"""## Application au df du domaine"""

# Application de la fonction √† la colonne description

df_domaine['col_clean'] = df_domaine['description'].apply(func_clean2)

# pr√©paration du texte propre
colonne_propre_domaine = " ".join([str(word) for word in df_domaine['col_clean']])
colonne_propre_domaine

"""### ‚òÅÔ∏è Wordlcoud df domaine"""

wordcloud_domaine = WordCloud(width=480,
                      height=480,
                      max_font_size=200,
                      min_font_size=10,
                      background_color="white"
                      )

token_mots_domaine = nltk.word_tokenize(colonne_propre_domaine)
mot_fdist_domaine = nltk.FreqDist(token_mots_domaine)
wordcloud_domaine.generate_from_frequencies(mot_fdist_domaine)

plt.figure(figsize=(20, 10))
plt.imshow(wordcloud_domaine, interpolation="bilinear")
plt.axis("off")
plt.margins(x=0, y=0)
plt.show()

"""## Application au df de vin g√©n√©ral"""

df_vins['col_clean'] = df_vins['description'].apply(func_clean2)

# pr√©paration du texte propre
colonne_propre_vins = " ".join([str(word) for word in df_domaine['col_clean']])
colonne_propre_vins

"""### ‚òÅÔ∏è Wordcloud df global"""

wordcloud_vins = WordCloud(width=480,
                      height=480,
                      max_font_size=200,
                      min_font_size=10,
                      background_color="white"
                      )

token_mots_vins = nltk.word_tokenize(colonne_propre_vins)
mot_fdist_vins = nltk.FreqDist(token_mots_vins)
wordcloud_vins.generate_from_frequencies(mot_fdist_vins)

plt.figure(figsize=(20, 10))
plt.imshow(wordcloud_vins, interpolation="bilinear")
plt.axis("off")
plt.margins(x=0, y=0)
plt.show()

"""# Export des df pour Tableau"""

from google.colab import files

df_vins.to_csv('df_vins.csv', encoding = 'utf-8-sig')

files.download('df_vins.csv')

df_domaine.to_csv('df_domaine.csv', encoding = 'utf-8-sig')

files.download('df_domaine.csv')